{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","pokemon","setPokemon","pokemonData","setPokemonData","pokemonType","setPokemonType","getPokemon","a","toArray","url","axios","get","res","push","data","types","type","name","console","log","className","onSubmit","e","preventDefault","onChange","target","value","toLowerCase","placeholder","map","src","sprites","Math","round","height","weight","game_indices","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA8EeA,EA1EH,WAAO,IAAD,EACcC,mBAAS,WADvB,mBACTC,EADS,KACAC,EADA,OAEsBF,mBAAS,IAF/B,mBAETG,EAFS,KAEIC,EAFJ,OAGsBJ,mBAAS,IAH/B,mBAGTK,EAHS,KAGIC,EAHJ,KAcVC,EAAU,uCAAG,gCAAAC,EAAA,6DACXC,EAAU,GADC,SAGTC,EAHS,4CAGkCT,GAHlC,SAIGU,IAAMC,IAAIF,GAJb,OAITG,EAJS,OAKfJ,EAAQK,KAAKD,EAAIE,MACjBT,EAAeO,EAAIE,KAAKC,MAAM,GAAGC,KAAKC,MACtCd,EAAeK,GAPA,kDASfU,QAAQC,IAAR,MATe,0DAAH,qDAehB,OAHAD,QAAQC,IAAIjB,GAIV,sBAAKkB,UAAU,MAAf,UACA,sBAAMC,SArBa,SAACC,GACpBA,EAAEC,iBACFjB,KAmBA,SACJ,gCACE,uBAAOU,KAAK,OAAOQ,SA1BE,SAACF,GACpBrB,EAAWqB,EAAEG,OAAOC,MAAMC,gBAyBeC,YAAY,sCAIvD1B,EAAY2B,KAAI,SAACf,GACX,OACE,sBAAKM,UAAU,YAAf,UACE,qBAAKU,IAAKhB,EAAKiB,QAAL,gBACV,qBAAKX,UAAU,WAAf,SACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,kBACA,qBAAKA,UAAU,eAAf,SAA+BhB,OAEjC,sBAAKgB,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,oBACA,sBAAKA,UAAU,eAAf,UACG,IACAY,KAAKC,MAAoB,IAAdnB,EAAKoB,QAFnB,UAKF,sBAAKd,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,oBACA,sBAAKA,UAAU,eAAf,UACG,IACAY,KAAKC,MAAMnB,EAAKqB,OAAS,KAF5B,aAKF,sBAAKf,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,+BACA,qBAAKA,UAAU,eAAf,SAA+BN,EAAKsB,aAAaC,2BCvDpDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e1d7c3cb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [pokemon, setPokemon] = useState(\"pikachu\");\n  const [pokemonData, setPokemonData] = useState([]);\n  const [pokemonType, setPokemonType] = useState(\"\");\n\n\n\n  const handleChange = (e) => {\n    setPokemon(e.target.value.toLowerCase());\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getPokemon();\n  };\n  const getPokemon = async () => {\n    const toArray = [];\n    try {\n      const url = `https://pokeapi.co/api/v2/pokemon/${pokemon}`;\n      const res = await axios.get(url);\n      toArray.push(res.data);\n      setPokemonType(res.data.types[0].type.name);\n      setPokemonData(toArray);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  console.log(pokemonData);\n\n\n  return (\n    <div className=\"App\">\n    <form onSubmit={handleSubmit}>\n<label>\n  <input type=\"text\" onChange={handleChange} placeholder=\"Entrez le nom d'un PokÃ©mon\" />\n</label>\n </form>\n\n {pokemonData.map((data) => {\n        return (\n          <div className=\"container\">\n            <img src={data.sprites[\"front_default\"]} />\n            <div className=\"divTable\">\n              <div className=\"divTableBody\">\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Type</div>\n                  <div className=\"divTableCell\">{pokemonType}</div>\n                </div>\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Height</div>\n                  <div className=\"divTableCell\">\n                    {\" \"}\n                    {Math.round(data.height * 3.9)}\"\n                  </div>\n                </div>\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Weight</div>\n                  <div className=\"divTableCell\">\n                    {\" \"}\n                    {Math.round(data.weight / 4.3)} lbs\n                  </div>\n                </div>\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Number of Battles</div>\n                  <div className=\"divTableCell\">{data.game_indices.length}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}